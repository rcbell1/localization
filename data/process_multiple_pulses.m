clear; close all

% path = '3/wired_center/rx9/';
% path = '3 - outdoors - 12_20_2019/tx_base/rx9/';
% path = '3/tx_base/rx1/';
% path = '3/tx_side/rx1/';
% path = '3/tx_opp_side/rx1/';
% path = '5 - wireless tests desk/tx_center/rfs9/6/';
% path = '8 - long wires tx sync/tx_center/rfs9/1/';
% path = '11 - long wires 01_20_2020/tx_center/rfs14/1/';
% path = '12 - outdoors - 01_20_2020/tx_side/rfs14/1/';
% path = '14 - wired 02_20_2020 1021/tx_center/rfs7/1/';
path = '15/tx_center/rfs7/1/';

nsamp_shift = 000; % number of symbols to shift bounds
start_bound_idx = 2;    
stop_bound_idx = 100;
fs_rx = 200e6/28;   % sample rate of receiver (denoms 22,40,200)

fs_tx = 200e6/50;   % sample rate of transmitter
sps = 2;            % samples per symbol at transmitter
span = 10;
nzeros = 3000;      % number of zeros (in symbols) inserted by transmitter
nsympulse = 1000;   % pulse length (in symbols) generated by transmitter
npulses = 100;      % number of pulses expected in the data
shift_up = 0.02;    % shift the zoomed in series for better viewing
peak_width = 10;    % number of samples to see on either side of corr peak
nstds = 55;         % draw threshold this many stds up

nitems = ceil(sps*(nsympulse+nzeros)*npulses*fs_rx/fs_tx);
Tptx = (nzeros+nsympulse+span)*sps/fs_tx;    % time per transmitted pulse
% Nprx = uint32(Tptx*fs_rx);  % number of samples per pulse at receiver
Nprx = round(Tptx*fs_rx);

Ts_rx = 1/fs_rx;
fsym = fs_tx/sps;
Tsym = 1/fsym;
sps_rx = Tsym/Ts_rx;   % effective sps at receiver
nsamp_shift = ceil(sps_rx)*nsamp_shift; % shift the correlating window

x1raw = read_complex_binary([path 'rx1.dat']);
x2raw = read_complex_binary([path 'rx2.dat']);
x3raw = read_complex_binary([path 'rx3.dat']);
bounds_raw = 1+nsamp_shift:Nprx:npulses*Nprx+nsamp_shift+1; % boundaries betweeen pulses

% this is dealing with the end of sequence conditions by padding as needed.
x1raw(bounds_raw(end)) = 0;    % zero pad to the last bound if needed
x2raw(bounds_raw(end)) = 0;
x3raw(bounds_raw(end)) = 0;
if stop_bound_idx > npulses + 1
    stop_bound_idx = npulses + 1;
end
neg_bound_idx = find(bounds_raw >= 0,1); % drop negative indices
if neg_bound_idx ~= 1
    bounds_raw = bounds_raw(neg_bound_idx:end); % remove negative bounds
    stop_bound_idx = stop_bound_idx - (neg_bound_idx-1);
end
x1 = x1raw(bounds_raw(start_bound_idx):bounds_raw(stop_bound_idx)-1); % reduce if needed
x2 = x2raw(bounds_raw(start_bound_idx):bounds_raw(stop_bound_idx)-1);
x3 = x3raw(bounds_raw(start_bound_idx):bounds_raw(stop_bound_idx)-1);
bounds_user = bounds_raw(start_bound_idx:stop_bound_idx);
bounds = bounds_user - bounds_user(1) + 1; % saved bounds will always start at 1

yblock = [x1 x2 x3];

save([path 'rx_pulses_sliced.mat'],'yblock','fs_rx','fs_tx','sps', ...
'nsympulse', 'Nprx', 'bounds', 'sps_rx')

%% Plot time domain of each receiver with labeled bounds
ymax = max(max(abs(yblock)));
ymax = 1.1*ymax;

y1last = x1(bounds(end-1):end); % use the last pulse
y2last = x2(bounds(end-1):end);
y3last = x3(bounds(end-1):end);

figure
subplot(5,3,1)
plot(real(x1raw)); hold all
plot(imag(x1raw))
plot([bounds_user; bounds_user], repmat([-1;1],1,length(bounds_user)), 'k--')
jj = 1;
for ii = start_bound_idx:stop_bound_idx
    text(double(bounds_user(jj)), 1.1*ymax, sprintf('%i', ii), ...
        'horizontalalignment','center', 'FontSize', 10,'clipping','on')
    jj = jj + 1;
end
title('Rx1 192.168.10.2')
axis([-inf inf -1.2*ymax 1.2*ymax])

subplot(5,3,2)
plot(real(x2raw)); hold all
plot(imag(x2raw))
plot([bounds_user; bounds_user], repmat([-1;1],1,length(bounds_user)), 'k--')
jj = 1;
for ii = start_bound_idx:stop_bound_idx
    text(double(bounds_user(jj)), 1.1*ymax, sprintf('%i', ii), ...
        'horizontalalignment','center', 'FontSize', 10,'clipping','on')
    jj = jj + 1;
end
title('Rx2 192.168.11.2')
axis([-inf inf -1.2*ymax 1.2*ymax])

subplot(5,3,3)
plot(real(x3raw)); hold all
plot(imag(x3raw))
plot([bounds_user; bounds_user], repmat([-1;1],1,length(bounds_user)), 'k--')
jj = 1;
for ii = start_bound_idx:stop_bound_idx
    text(double(bounds_user(jj)), 1.1*ymax, sprintf('%i', ii), ...
        'horizontalalignment','center', 'FontSize', 10,'clipping','on')
    jj = jj + 1;
end
title('Rx3 192.168.12.2')
axis([-inf inf -1.2*ymax 1.2*ymax])

%% Zoomed in last pulse
subplot(5,3,4:6)
plot(real(y1last)+2*shift_up); hold all
plot(real(y2last)+shift_up)
plot(real(y3last))
title('Zoomed In Last Pulse (Real)')
xlabel('Sample Number')
ylabel('Magnitude')
legend('Rx1','Rx2','Rx3')
axis tight

subplot(5,3,7:9)
plot(imag(y1last)+2*shift_up); hold all
plot(imag(y2last)+shift_up)
plot(imag(y3last))
title('Zoomed In Last Pulse (Imag)')
xlabel('Sample Number')
ylabel('Magnitude')
legend('Rx1','Rx2','Rx3')
axis tight

%% Correlation Plots
[c12, lags12] = xcorr(y1last,y2last);
[c13, lags13] = xcorr(y1last,y3last);
cmag12 = abs(c12);
mean12 = mean(cmag12);
std12 = std(cmag12);
cmag13 = abs(c13);
mean13 = mean(cmag13);
std13 = std(cmag13);
[mval12, midx12] = max(cmag12);
[mval13, midx13] = max(cmag13);
clen = 2*double(Nprx)-1;  % each xi stream should be equal length assumption
% lags = (1:clen)-(clen+1)/2;
% mlagidx12 = midx12-median(midx12);
% mlagidx13 = midx13-median(midx13);
mlagidx12 = midx12-(clen+1)/2;
mlagidx13 = midx13-(clen+1)/2;

subplot(5,3,10:11)
plot(lags12, abs(c12)-mean12); hold all
plot([lags12(1) lags12(end)], [nstds*std12 nstds*std12], 'r--')
axis([lags12(1) lags12(end) -inf inf])
xlabel('Lag12')
ylabel('Correlation Magnitude')
title('Cross-correlation Rx1 and Rx2')
text(mlagidx12+10,mval12/2,sprintf('Lag Index of Peak: %i\nPeak Value: %f', mlagidx12, mval12))

subplot(5,3,12)
plot(lags12, abs(c12)-mean12, 'b.-', 'MarkerSize', 12); hold all
plot([-peak_width peak_width], [nstds*std12 nstds*std12], 'r--')
ytop = max((nstds+3)*std12, max(cmag12));
axis([mlagidx12-peak_width mlagidx12+peak_width (nstds-3)*std12 ytop*1.03])
xlabel('Lag12')
ylabel('Correlation Magnitude')
title('Cross-correlation Rx1 and Rx2')

subplot(5,3,13:14)
plot(lags13, abs(c13)-mean13); hold all
plot([lags13(1) lags13(end)], [nstds*std13 nstds*std13], 'r--')
axis([lags13(1) lags13(end) -inf inf])
xlabel('Lag13')
ylabel('Correlation Magnitude')
title('Cross-correlation Rx1 and Rx3')
text(mlagidx13+10,mval13/2,sprintf('Lag Index of Peak: %i\nPeak Value: %f', mlagidx13, mval13))

subplot(5,3,15)
plot(lags13, abs(c13)-mean13, 'b.-', 'MarkerSize', 12); hold all
plot([-peak_width peak_width], [nstds*std13 nstds*std13], 'r--')
ytop = max((nstds+3)*std13, max(cmag13));
axis([mlagidx13-peak_width mlagidx13+peak_width (nstds-3)*std13 ytop*1.03])
xlabel('Lag13')
ylabel('Correlation Magnitude')
title('Cross-correlation Rx1 and Rx3')

%% Confirm new blocked data boundaries are correct
% bounds = bounds - bounds(1) + 1;
figure
subplot(3,1,1)
plot(real(yblock(:,1))); hold all
plot(imag(yblock(:,1)))
plot([bounds; bounds], repmat([-1;1],1,length(bounds)), 'k--')
for ii = 1:length(bounds)
    text(double(bounds(ii)), 1.1*ymax, sprintf('%i', ii), ...
        'horizontalalignment','center', 'FontSize', 10,'clipping','on')
end
title('Rx1 192.168.10.2')
axis([-inf inf -1.2*ymax 1.2*ymax])
subplot(3,1,2)
plot(real(yblock(:,2))); hold all
plot(imag(yblock(:,2)))
plot([bounds; bounds], repmat([-1;1],1,length(bounds)), 'k--')
for ii = 1:length(bounds)
    text(double(bounds(ii)), 1.1*ymax, sprintf('%i', ii), ...
        'horizontalalignment','center', 'FontSize', 10,'clipping','on')
end
title('Rx2 192.168.11.2')
axis([-inf inf -1.2*ymax 1.2*ymax])
subplot(3,1,3)
plot(real(yblock(:,3))); hold all
plot(imag(yblock(:,3)))
plot([bounds; bounds], repmat([-1;1],1,length(bounds)), 'k--')
for ii = 1:length(bounds)
    text(double(bounds(ii)), 1.1*ymax, sprintf('%i', ii), ...
        'horizontalalignment','center', 'FontSize', 10,'clipping','on')
end
title('Rx3 192.168.12.2')
axis([-inf inf -1.2*ymax 1.2*ymax])